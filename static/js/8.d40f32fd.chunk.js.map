{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/react-number-format/dist/react-number-format.es.js","../../src/yup.ts"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","_defineProperties","props","i","descriptor","enumerable","configurable","writable","defineProperty","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_assertThisInitialized","self","ReferenceError","emptyFunction","emptyFunctionWithReset","resetWarningCache","propTypes","fn","module","exports","createCommonjsModule","shim","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bool","func","number","string","symbol","any","arrayOf","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","factoryWithThrowingShims","noop","charIsNumber","_char","isNil","escapeRegExp","str","splitDecimal","numStr","allowNegative","hasNagation","addNegation","parts","beforeDecimal","afterDecimal","limitToScale","scale","fixedDecimalScale","filler","setCaretPosition","el","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","clamp","num","Math","getCurrentCaretPosition","selectionEnd","propTypes$1","thousandSeparator","decimalSeparator","allowedDecimalSeparators","thousandsGroupStyle","decimalScale","displayType","prefix","suffix","format","removeFormatting","mask","isNumericString","customInput","allowEmptyFormatting","allowLeadingZeros","onValueChange","onKeyDown","onMouseUp","onChange","onFocus","onBlur","isAllowed","renderText","getInputRef","defaultProps","NumberFormat","_React$Component","_this","instance","Constructor","TypeError","_classCallCheck","validateProps","formattedValue","formatValueProp","numAsString","mounted","selectionBeforeInput","protoProps","staticProps","subClass","superClass","create","_inherits","setState","prevProps","updateValueIfRequired","clearTimeout","focusTimeout","focusedElm","stateValue","_state$numAsString","lastNumStr","lastValueWithNewFormat","formatNumString","floatValue","lastFloatValue","updateValue","_this$getSeparators","getSeparators","numRegex","getNumberRegex","hasNegation","firstDecimalIndex","join","concat","g","ignoreDecimalSeparator","_this$props","_this$props2","_this$props$mask","_this$getSeparators3","toString","currentValue","setTimeout","direction","_this$props3","firstHashPosition","lastIndexOf","nextPos","caretLeftBound","caretRightBound","j","inputNumber","formattedNumber","currentInputChar","currentFormatChar","correctCaretPosition","_this$props4","isNegative","suffixLastIndex","formatArray","start","ln","part","_this$props5","removePatternFormatting","removePrefixAndSuffix","getFloatString","hashCount","formattedNumberAry","getMaskAtIndex","_this$props6","_this$getSeparators4","hasDecimalSeparator","_splitDecimal","thousandsGroupRegex","getThousandsGroupRegex","applyThousandSeparator","_this$props7","formatWithPattern","formatAsNumber","_this$props8","_this$props9","isNonNumericFalsy","shoudHaveDecimalSeparator","roundedDecimalParts","toFixed","intPart","reverse","roundedStr","idx","Number","decimalPart","roundToPrecision","formatInput","negationRegex","doubleNegationRegex","removeNegation","formatNegation","_this$props10","end","isCharacterAFormat","lastValue","_this$props11","_this$getSeparators6","_this$selectionBefore","_findChangedIndex","prevValue","prevLength","newLength","findChangedIndex","separator","substr","leftBound","rightBound","checkIfFormatGotDeleted","numericString","_splitDecimal2","isBeforeDecimalPoint","params","_params$setCaretPosit","currentCaretPosition","getCaretPosition","setPatchedCaretPosition","getValueObject","correctInputValue","isChangeAllowed","fixLeadingZero","expectedCaretPosition","_el$value","_this$props12","negativeRegex","isPatternFormat","newCaretPosition","isUnitTestRun","_el$value2","caretPosition","_this2","_el$value3","_this$props13","_this$state","otherProps","keyMaps","filteredObj","omit","inputProps","inputMode","navigator","platform","addInputMode","React","createElement","CustomInput","Component","parseErrorSchema","inner","previousTypes","yupResolver","schema","abortEarly","parsedErrors"],"mappings":"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","file":"static/js/8.d40f32fd.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","/**\n * react-number-format - 4.5.3\n * Author : Sudhanshu Yadav\n * Copyright (c) 2016, 2021 to Sudhanshu Yadav, released under the MIT license.\n * https://github.com/s-yadav/react-number-format\n */\n\nimport React from 'react';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret_1) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  }  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  }  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n{\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = factoryWithThrowingShims();\n}\n});\n\n// basic noop function\nfunction noop() {}\nfunction returnTrue() {\n  return true;\n}\nfunction charIsNumber(_char) {\n  return !!(_char || '').match(/\\d/);\n}\nfunction isNil(val) {\n  return val === null || val === undefined;\n}\nfunction escapeRegExp(str) {\n  return str.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n}\nfunction getThousandsGroupRegex(thousandsGroupStyle) {\n  switch (thousandsGroupStyle) {\n    case 'lakh':\n      return /(\\d+?)(?=(\\d\\d)+(\\d)(?!\\d))(\\.\\d+)?/g;\n\n    case 'wan':\n      return /(\\d)(?=(\\d{4})+(?!\\d))/g;\n\n    case 'thousand':\n    default:\n      return /(\\d)(?=(\\d{3})+(?!\\d))/g;\n  }\n}\nfunction applyThousandSeparator(str, thousandSeparator, thousandsGroupStyle) {\n  var thousandsGroupRegex = getThousandsGroupRegex(thousandsGroupStyle);\n  var index = str.search(/[1-9]/);\n  index = index === -1 ? str.length : index;\n  return str.substring(0, index) + str.substring(index, str.length).replace(thousandsGroupRegex, '$1' + thousandSeparator);\n} //spilt a float number into different parts beforeDecimal, afterDecimal, and negation\n\nfunction splitDecimal(numStr) {\n  var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var hasNagation = numStr[0] === '-';\n  var addNegation = hasNagation && allowNegative;\n  numStr = numStr.replace('-', '');\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0];\n  var afterDecimal = parts[1] || '';\n  return {\n    beforeDecimal: beforeDecimal,\n    afterDecimal: afterDecimal,\n    hasNagation: hasNagation,\n    addNegation: addNegation\n  };\n}\nfunction fixLeadingZero(numStr) {\n  if (!numStr) return numStr;\n  var isNegative = numStr[0] === '-';\n  if (isNegative) numStr = numStr.substring(1, numStr.length);\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';\n  var afterDecimal = parts[1] || '';\n  return \"\".concat(isNegative ? '-' : '').concat(beforeDecimal).concat(afterDecimal ? \".\".concat(afterDecimal) : '');\n}\n/**\n * limit decimal numbers to given scale\n * Not used .fixedTo because that will break with big numbers\n */\n\nfunction limitToScale(numStr, scale, fixedDecimalScale) {\n  var str = '';\n  var filler = fixedDecimalScale ? '0' : '';\n\n  for (var i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n\n  return str;\n}\n/**\n * This method is required to round prop value to given scale.\n * Not used .round or .fixedTo because that will break with big numbers\n */\n\nfunction roundToPrecision(numStr, scale, fixedDecimalScale) {\n  //if number is empty don't do anything return empty string\n  if (['', '-'].indexOf(numStr) !== -1) return numStr;\n  var shoudHaveDecimalSeparator = numStr.indexOf('.') !== -1 && scale;\n\n  var _splitDecimal = splitDecimal(numStr),\n      beforeDecimal = _splitDecimal.beforeDecimal,\n      afterDecimal = _splitDecimal.afterDecimal,\n      hasNagation = _splitDecimal.hasNagation;\n\n  var floatValue = parseFloat(\"0.\".concat(afterDecimal || '0'));\n  var floatValueStr = afterDecimal.length <= scale ? floatValue.toString() : floatValue.toFixed(scale);\n  var roundedDecimalParts = floatValueStr.split('.');\n  var intPart = beforeDecimal.split('').reverse().reduce(function (roundedStr, current, idx) {\n    if (roundedStr.length > idx) {\n      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);\n    }\n\n    return current + roundedStr;\n  }, roundedDecimalParts[0]);\n  var decimalPart = limitToScale(roundedDecimalParts[1] || '', Math.min(scale, afterDecimal.length), fixedDecimalScale);\n  var negation = hasNagation ? '-' : '';\n  var decimalSeparator = shoudHaveDecimalSeparator ? '.' : '';\n  return \"\".concat(negation).concat(intPart).concat(decimalSeparator).concat(decimalPart);\n}\nfunction omit(obj, keyMaps) {\n  var filteredObj = {};\n  Object.keys(obj).forEach(function (key) {\n    if (!keyMaps[key]) filteredObj[key] = obj[key];\n  });\n  return filteredObj;\n}\n/** set the caret positon in an input field **/\n\nfunction setCaretPosition(el, caretPos) {\n  el.value = el.value; // ^ this is used to not only get \"focus\", but\n  // to make sure we don't have it everything -selected-\n  // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n\n  if (el !== null) {\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    } // (el.selectionStart === 0 added for Firefox bug)\n\n\n    if (el.selectionStart || el.selectionStart === 0) {\n      el.focus();\n      el.setSelectionRange(caretPos, caretPos);\n      return true;\n    } // fail city, fortunately this never happens (as far as I've tested) :)\n\n\n    el.focus();\n    return false;\n  }\n}\n/**\n  Given previous value and newValue it returns the index\n  start - end to which values have changed.\n  This function makes assumption about only consecutive\n  characters are changed which is correct assumption for caret input.\n*/\n\nfunction findChangedIndex(prevValue, newValue) {\n  var i = 0,\n      j = 0;\n  var prevLength = prevValue.length;\n  var newLength = newValue.length;\n\n  while (prevValue[i] === newValue[i] && i < prevLength) {\n    i++;\n  } //check what has been changed from last\n\n\n  while (prevValue[prevLength - 1 - j] === newValue[newLength - 1 - j] && newLength - j > i && prevLength - j > i) {\n    j++;\n  }\n\n  return {\n    start: i,\n    end: prevLength - j\n  };\n}\n/*\n  Returns a number whose value is limited to the given range\n*/\n\nfunction clamp(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n}\nfunction getCurrentCaretPosition(el) {\n  /*Max of selectionStart and selectionEnd is taken for the patch of pixel and other mobile device caret bug*/\n  return Math.max(el.selectionStart, el.selectionEnd);\n}\nfunction addInputMode(format) {\n  return format || !(navigator.platform && /iPhone|iPod/.test(navigator.platform));\n}\n\nvar propTypes$1 = {\n  thousandSeparator: propTypes.oneOfType([propTypes.string, propTypes.oneOf([true])]),\n  decimalSeparator: propTypes.string,\n  allowedDecimalSeparators: propTypes.arrayOf(propTypes.string),\n  thousandsGroupStyle: propTypes.oneOf(['thousand', 'lakh', 'wan']),\n  decimalScale: propTypes.number,\n  fixedDecimalScale: propTypes.bool,\n  displayType: propTypes.oneOf(['input', 'text']),\n  prefix: propTypes.string,\n  suffix: propTypes.string,\n  format: propTypes.oneOfType([propTypes.string, propTypes.func]),\n  removeFormatting: propTypes.func,\n  mask: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),\n  value: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  defaultValue: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  isNumericString: propTypes.bool,\n  customInput: propTypes.elementType,\n  allowNegative: propTypes.bool,\n  allowEmptyFormatting: propTypes.bool,\n  allowLeadingZeros: propTypes.bool,\n  onValueChange: propTypes.func,\n  onKeyDown: propTypes.func,\n  onMouseUp: propTypes.func,\n  onChange: propTypes.func,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func,\n  type: propTypes.oneOf(['text', 'tel', 'password']),\n  isAllowed: propTypes.func,\n  renderText: propTypes.func,\n  getInputRef: propTypes.oneOfType([propTypes.func, // for legacy refs\n  propTypes.shape({\n    current: propTypes.any\n  })])\n};\nvar defaultProps = {\n  displayType: 'input',\n  decimalSeparator: '.',\n  thousandsGroupStyle: 'thousand',\n  fixedDecimalScale: false,\n  prefix: '',\n  suffix: '',\n  allowNegative: true,\n  allowEmptyFormatting: false,\n  allowLeadingZeros: false,\n  isNumericString: false,\n  type: 'text',\n  onValueChange: noop,\n  onChange: noop,\n  onKeyDown: noop,\n  onMouseUp: noop,\n  onFocus: noop,\n  onBlur: noop,\n  isAllowed: returnTrue\n};\n\nvar NumberFormat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NumberFormat, _React$Component);\n\n  function NumberFormat(props) {\n    var _this;\n\n    _classCallCheck(this, NumberFormat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberFormat).call(this, props));\n    var defaultValue = props.defaultValue; //validate props\n\n    _this.validateProps();\n\n    var formattedValue = _this.formatValueProp(defaultValue);\n\n    _this.state = {\n      value: formattedValue,\n      numAsString: _this.removeFormatting(formattedValue),\n      mounted: false\n    };\n    _this.selectionBeforeInput = {\n      selectionStart: 0,\n      selectionEnd: 0\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));\n    _this.onMouseUp = _this.onMouseUp.bind(_assertThisInitialized(_this));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(NumberFormat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // set mounted state\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        mounted: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.updateValueIfRequired(prevProps);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.focusTimeout);\n    }\n  }, {\n    key: \"updateValueIfRequired\",\n    value: function updateValueIfRequired(prevProps) {\n      var props = this.props,\n          state = this.state,\n          focusedElm = this.focusedElm;\n      var stateValue = state.value,\n          _state$numAsString = state.numAsString,\n          lastNumStr = _state$numAsString === void 0 ? '' : _state$numAsString; // If only state changed no need to do any thing\n\n      if (prevProps !== props) {\n        //validate props\n        this.validateProps();\n        var lastValueWithNewFormat = this.formatNumString(lastNumStr);\n        var formattedValue = isNil(props.value) ? lastValueWithNewFormat : this.formatValueProp();\n        var numAsString = this.removeFormatting(formattedValue);\n        var floatValue = parseFloat(numAsString);\n        var lastFloatValue = parseFloat(lastNumStr);\n\n        if ( //while typing set state only when float value changes\n        (!isNaN(floatValue) || !isNaN(lastFloatValue)) && floatValue !== lastFloatValue || //can also set state when float value is same and the format props changes\n        lastValueWithNewFormat !== stateValue || //set state always when not in focus and formatted value is changed\n        focusedElm === null && formattedValue !== stateValue) {\n          this.updateValue({\n            formattedValue: formattedValue,\n            numAsString: numAsString,\n            input: focusedElm\n          });\n        }\n      }\n    }\n    /** Misc methods **/\n\n  }, {\n    key: \"getFloatString\",\n    value: function getFloatString() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var decimalScale = this.props.decimalScale;\n\n      var _this$getSeparators = this.getSeparators(),\n          decimalSeparator = _this$getSeparators.decimalSeparator;\n\n      var numRegex = this.getNumberRegex(true); //remove negation for regex check\n\n      var hasNegation = num[0] === '-';\n      if (hasNegation) num = num.replace('-', ''); //if decimal scale is zero remove decimal and number after decimalSeparator\n\n      if (decimalSeparator && decimalScale === 0) {\n        num = num.split(decimalSeparator)[0];\n      }\n\n      num = (num.match(numRegex) || []).join('').replace(decimalSeparator, '.'); //remove extra decimals\n\n      var firstDecimalIndex = num.indexOf('.');\n\n      if (firstDecimalIndex !== -1) {\n        num = \"\".concat(num.substring(0, firstDecimalIndex), \".\").concat(num.substring(firstDecimalIndex + 1, num.length).replace(new RegExp(escapeRegExp(decimalSeparator), 'g'), ''));\n      } //add negation back\n\n\n      if (hasNegation) num = '-' + num;\n      return num;\n    } //returned regex assumes decimalSeparator is as per prop\n\n  }, {\n    key: \"getNumberRegex\",\n    value: function getNumberRegex(g, ignoreDecimalSeparator) {\n      var _this$props = this.props,\n          format = _this$props.format,\n          decimalScale = _this$props.decimalScale;\n\n      var _this$getSeparators2 = this.getSeparators(),\n          decimalSeparator = _this$getSeparators2.decimalSeparator;\n\n      return new RegExp('\\\\d' + (decimalSeparator && decimalScale !== 0 && !ignoreDecimalSeparator && !format ? '|' + escapeRegExp(decimalSeparator) : ''), g ? 'g' : undefined);\n    }\n  }, {\n    key: \"getSeparators\",\n    value: function getSeparators() {\n      var decimalSeparator = this.props.decimalSeparator;\n      var _this$props2 = this.props,\n          thousandSeparator = _this$props2.thousandSeparator,\n          allowedDecimalSeparators = _this$props2.allowedDecimalSeparators;\n\n      if (thousandSeparator === true) {\n        thousandSeparator = ',';\n      }\n\n      if (!allowedDecimalSeparators) {\n        allowedDecimalSeparators = [decimalSeparator, '.'];\n      }\n\n      return {\n        decimalSeparator: decimalSeparator,\n        thousandSeparator: thousandSeparator,\n        allowedDecimalSeparators: allowedDecimalSeparators\n      };\n    }\n  }, {\n    key: \"getMaskAtIndex\",\n    value: function getMaskAtIndex(index) {\n      var _this$props$mask = this.props.mask,\n          mask = _this$props$mask === void 0 ? ' ' : _this$props$mask;\n\n      if (typeof mask === 'string') {\n        return mask;\n      }\n\n      return mask[index] || ' ';\n    }\n  }, {\n    key: \"getValueObject\",\n    value: function getValueObject(formattedValue, numAsString) {\n      var floatValue = parseFloat(numAsString);\n      return {\n        formattedValue: formattedValue,\n        value: numAsString,\n        floatValue: isNaN(floatValue) ? undefined : floatValue\n      };\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps() {\n      var mask = this.props.mask; //validate decimalSeparator and thousandSeparator\n\n      var _this$getSeparators3 = this.getSeparators(),\n          decimalSeparator = _this$getSeparators3.decimalSeparator,\n          thousandSeparator = _this$getSeparators3.thousandSeparator;\n\n      if (decimalSeparator === thousandSeparator) {\n        throw new Error(\"\\n          Decimal separator can't be same as thousand separator.\\n          thousandSeparator: \".concat(thousandSeparator, \" (thousandSeparator = {true} is same as thousandSeparator = \\\",\\\")\\n          decimalSeparator: \").concat(decimalSeparator, \" (default value for decimalSeparator is .)\\n       \"));\n      } //validate mask\n\n\n      if (mask) {\n        var maskAsStr = mask === 'string' ? mask : mask.toString();\n\n        if (maskAsStr.match(/\\d/g)) {\n          throw new Error(\"\\n          Mask \".concat(mask, \" should not contain numeric character;\\n        \"));\n        }\n      }\n    }\n    /** Misc methods end **/\n\n    /** caret specific methods **/\n\n  }, {\n    key: \"setPatchedCaretPosition\",\n    value: function setPatchedCaretPosition(el, caretPos, currentValue) {\n      /* setting caret position within timeout of 0ms is required for mobile chrome,\n      otherwise browser resets the caret position after we set it\n      We are also setting it without timeout so that in normal browser we don't see the flickering */\n      setCaretPosition(el, caretPos);\n      setTimeout(function () {\n        if (el.value === currentValue) setCaretPosition(el, caretPos);\n      }, 0);\n    }\n    /* This keeps the caret within typing area so people can't type in between prefix or suffix */\n\n  }, {\n    key: \"correctCaretPosition\",\n    value: function correctCaretPosition(value, caretPos, direction) {\n      var _this$props3 = this.props,\n          prefix = _this$props3.prefix,\n          suffix = _this$props3.suffix,\n          format = _this$props3.format; //if value is empty return 0\n\n      if (value === '') return 0; //caret position should be between 0 and value length\n\n      caretPos = clamp(caretPos, 0, value.length); //in case of format as number limit between prefix and suffix\n\n      if (!format) {\n        var hasNegation = value[0] === '-';\n        return clamp(caretPos, prefix.length + (hasNegation ? 1 : 0), value.length - suffix.length);\n      } //in case if custom format method don't do anything\n\n\n      if (typeof format === 'function') return caretPos;\n      /* in case format is string find the closest # position from the caret position */\n      //in case the caretPos have input value on it don't do anything\n\n      if (format[caretPos] === '#' && charIsNumber(value[caretPos])) return caretPos; //if caretPos is just after input value don't do anything\n\n      if (format[caretPos - 1] === '#' && charIsNumber(value[caretPos - 1])) return caretPos; //find the nearest caret position\n\n      var firstHashPosition = format.indexOf('#');\n      var lastHashPosition = format.lastIndexOf('#'); //limit the cursor between the first # position and the last # position\n\n      caretPos = clamp(caretPos, firstHashPosition, lastHashPosition + 1);\n      var nextPos = format.substring(caretPos, format.length).indexOf('#');\n      var caretLeftBound = caretPos;\n      var caretRightBound = caretPos + (nextPos === -1 ? 0 : nextPos); //get the position where the last number is present\n\n      while (caretLeftBound > firstHashPosition && (format[caretLeftBound] !== '#' || !charIsNumber(value[caretLeftBound]))) {\n        caretLeftBound -= 1;\n      }\n\n      var goToLeft = !charIsNumber(value[caretRightBound]) || direction === 'left' && caretPos !== firstHashPosition || caretPos - caretLeftBound < caretRightBound - caretPos;\n\n      if (goToLeft) {\n        //check if number should be taken after the bound or after it\n        //if number preceding a valid number keep it after\n        return charIsNumber(value[caretLeftBound]) ? caretLeftBound + 1 : caretLeftBound;\n      }\n\n      return caretRightBound;\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(inputValue, formattedValue, caretPos) {\n      var format = this.props.format;\n      var stateValue = this.state.value;\n      var numRegex = this.getNumberRegex(true);\n      var inputNumber = (inputValue.match(numRegex) || []).join('');\n      var formattedNumber = (formattedValue.match(numRegex) || []).join('');\n      var j, i;\n      j = 0;\n\n      for (i = 0; i < caretPos; i++) {\n        var currentInputChar = inputValue[i] || '';\n        var currentFormatChar = formattedValue[j] || ''; //no need to increase new cursor position if formatted value does not have those characters\n        //case inputValue = 1a23 and formattedValue =  123\n\n        if (!currentInputChar.match(numRegex) && currentInputChar !== currentFormatChar) continue; //When we are striping out leading zeros maintain the new cursor position\n        //Case inputValue = 00023 and formattedValue = 23;\n\n        if (currentInputChar === '0' && currentFormatChar.match(numRegex) && currentFormatChar !== '0' && inputNumber.length !== formattedNumber.length) continue; //we are not using currentFormatChar because j can change here\n\n        while (currentInputChar !== formattedValue[j] && j < formattedValue.length) {\n          j++;\n        }\n\n        j++;\n      }\n\n      if (typeof format === 'string' && !stateValue) {\n        //set it to the maximum value so it goes after the last number\n        j = formattedValue.length;\n      } //correct caret position if its outside of editable area\n\n\n      j = this.correctCaretPosition(formattedValue, j);\n      return j;\n    }\n    /** caret specific methods ends **/\n\n    /** methods to remove formattting **/\n\n  }, {\n    key: \"removePrefixAndSuffix\",\n    value: function removePrefixAndSuffix(val) {\n      var _this$props4 = this.props,\n          format = _this$props4.format,\n          prefix = _this$props4.prefix,\n          suffix = _this$props4.suffix; //remove prefix and suffix\n\n      if (!format && val) {\n        var isNegative = val[0] === '-'; //remove negation sign\n\n        if (isNegative) val = val.substring(1, val.length); //remove prefix\n\n        val = prefix && val.indexOf(prefix) === 0 ? val.substring(prefix.length, val.length) : val; //remove suffix\n\n        var suffixLastIndex = val.lastIndexOf(suffix);\n        val = suffix && suffixLastIndex !== -1 && suffixLastIndex === val.length - suffix.length ? val.substring(0, suffixLastIndex) : val; //add negation sign back\n\n        if (isNegative) val = '-' + val;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"removePatternFormatting\",\n    value: function removePatternFormatting(val) {\n      var format = this.props.format;\n      var formatArray = format.split('#').filter(function (str) {\n        return str !== '';\n      });\n      var start = 0;\n      var numStr = '';\n\n      for (var i = 0, ln = formatArray.length; i <= ln; i++) {\n        var part = formatArray[i] || ''; //if i is the last fragment take the index of end of the value\n        //For case like +1 (911) 911 91 91 having pattern +1 (###) ### ## ##\n\n        var index = i === ln ? val.length : val.indexOf(part, start);\n        /* in any case if we don't find the pattern part in the value assume the val as numeric string\n        This will be also in case if user has started typing, in any other case it will not be -1\n        unless wrong prop value is provided */\n\n        if (index === -1) {\n          numStr = val;\n          break;\n        } else {\n          numStr += val.substring(start, index);\n          start = index + part.length;\n        }\n      }\n\n      return (numStr.match(/\\d/g) || []).join('');\n    }\n  }, {\n    key: \"removeFormatting\",\n    value: function removeFormatting(val) {\n      var _this$props5 = this.props,\n          format = _this$props5.format,\n          removeFormatting = _this$props5.removeFormatting;\n      if (!val) return val;\n\n      if (!format) {\n        val = this.removePrefixAndSuffix(val);\n        val = this.getFloatString(val);\n      } else if (typeof format === 'string') {\n        val = this.removePatternFormatting(val);\n      } else if (typeof removeFormatting === 'function') {\n        //condition need to be handled if format method is provide,\n        val = removeFormatting(val);\n      } else {\n        val = (val.match(/\\d/g) || []).join('');\n      }\n\n      return val;\n    }\n    /** methods to remove formattting end **/\n\n    /*** format specific methods start ***/\n\n    /**\n     * Format when # based string is provided\n     * @param  {string} numStr Numeric String\n     * @return {string}        formatted Value\n     */\n\n  }, {\n    key: \"formatWithPattern\",\n    value: function formatWithPattern(numStr) {\n      var format = this.props.format;\n      var hashCount = 0;\n      var formattedNumberAry = format.split('');\n\n      for (var i = 0, ln = format.length; i < ln; i++) {\n        if (format[i] === '#') {\n          formattedNumberAry[i] = numStr[hashCount] || this.getMaskAtIndex(hashCount);\n          hashCount += 1;\n        }\n      }\n\n      return formattedNumberAry.join('');\n    }\n    /**\n     * @param  {string} numStr Numeric string/floatString] It always have decimalSeparator as .\n     * @return {string} formatted Value\n     */\n\n  }, {\n    key: \"formatAsNumber\",\n    value: function formatAsNumber(numStr) {\n      var _this$props6 = this.props,\n          decimalScale = _this$props6.decimalScale,\n          fixedDecimalScale = _this$props6.fixedDecimalScale,\n          prefix = _this$props6.prefix,\n          suffix = _this$props6.suffix,\n          allowNegative = _this$props6.allowNegative,\n          thousandsGroupStyle = _this$props6.thousandsGroupStyle;\n\n      var _this$getSeparators4 = this.getSeparators(),\n          thousandSeparator = _this$getSeparators4.thousandSeparator,\n          decimalSeparator = _this$getSeparators4.decimalSeparator;\n\n      var hasDecimalSeparator = numStr.indexOf('.') !== -1 || decimalScale && fixedDecimalScale;\n\n      var _splitDecimal = splitDecimal(numStr, allowNegative),\n          beforeDecimal = _splitDecimal.beforeDecimal,\n          afterDecimal = _splitDecimal.afterDecimal,\n          addNegation = _splitDecimal.addNegation; // eslint-disable-line prefer-const\n      //apply decimal precision if its defined\n\n\n      if (decimalScale !== undefined) afterDecimal = limitToScale(afterDecimal, decimalScale, fixedDecimalScale);\n\n      if (thousandSeparator) {\n        beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator, thousandsGroupStyle);\n      } //add prefix and suffix\n\n\n      if (prefix) beforeDecimal = prefix + beforeDecimal;\n      if (suffix) afterDecimal = afterDecimal + suffix; //restore negation sign\n\n      if (addNegation) beforeDecimal = '-' + beforeDecimal;\n      numStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;\n      return numStr;\n    }\n  }, {\n    key: \"formatNumString\",\n    value: function formatNumString() {\n      var numStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var _this$props7 = this.props,\n          format = _this$props7.format,\n          allowEmptyFormatting = _this$props7.allowEmptyFormatting;\n      var formattedValue = numStr;\n\n      if (numStr === '' && !allowEmptyFormatting) {\n        formattedValue = '';\n      } else if (numStr === '-' && !format) {\n        formattedValue = '-';\n      } else if (typeof format === 'string') {\n        formattedValue = this.formatWithPattern(formattedValue);\n      } else if (typeof format === 'function') {\n        formattedValue = format(formattedValue);\n      } else {\n        formattedValue = this.formatAsNumber(formattedValue);\n      }\n\n      return formattedValue;\n    }\n  }, {\n    key: \"formatValueProp\",\n    value: function formatValueProp(defaultValue) {\n      var _this$props8 = this.props,\n          format = _this$props8.format,\n          decimalScale = _this$props8.decimalScale,\n          fixedDecimalScale = _this$props8.fixedDecimalScale,\n          allowEmptyFormatting = _this$props8.allowEmptyFormatting;\n      var _this$props9 = this.props,\n          value = _this$props9.value,\n          isNumericString = _this$props9.isNumericString; // if value is undefined or null, use defaultValue instead\n\n      value = isNil(value) ? defaultValue : value;\n      var isNonNumericFalsy = !value && value !== 0;\n\n      if (isNonNumericFalsy && allowEmptyFormatting) {\n        value = '';\n      } // if value is not defined return empty string\n\n\n      if (isNonNumericFalsy && !allowEmptyFormatting) return '';\n\n      if (typeof value === 'number') {\n        value = value.toString();\n        isNumericString = true;\n      } //change infinity value to empty string\n\n\n      if (value === 'Infinity' && isNumericString) {\n        value = '';\n      } //round the number based on decimalScale\n      //format only if non formatted value is provided\n\n\n      if (isNumericString && !format && typeof decimalScale === 'number') {\n        value = roundToPrecision(value, decimalScale, fixedDecimalScale);\n      }\n\n      var formattedValue = isNumericString ? this.formatNumString(value) : this.formatInput(value);\n      return formattedValue;\n    }\n  }, {\n    key: \"formatNegation\",\n    value: function formatNegation() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var allowNegative = this.props.allowNegative;\n      var negationRegex = new RegExp('(-)');\n      var doubleNegationRegex = new RegExp('(-)(.)*(-)'); // Check number has '-' value\n\n      var hasNegation = negationRegex.test(value); // Check number has 2 or more '-' values\n\n      var removeNegation = doubleNegationRegex.test(value); //remove negation\n\n      value = value.replace(/-/g, '');\n\n      if (hasNegation && !removeNegation && allowNegative) {\n        value = '-' + value;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"formatInput\",\n    value: function formatInput() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var format = this.props.format; //format negation only if we are formatting as number\n\n      if (!format) {\n        value = this.removePrefixAndSuffix(value);\n        value = this.formatNegation(value);\n      } //remove formatting from number\n\n\n      value = this.removeFormatting(value);\n      return this.formatNumString(value);\n    }\n    /*** format specific methods end ***/\n\n  }, {\n    key: \"isCharacterAFormat\",\n    value: function isCharacterAFormat(caretPos, value) {\n      var _this$props10 = this.props,\n          format = _this$props10.format,\n          prefix = _this$props10.prefix,\n          suffix = _this$props10.suffix,\n          decimalScale = _this$props10.decimalScale,\n          fixedDecimalScale = _this$props10.fixedDecimalScale;\n\n      var _this$getSeparators5 = this.getSeparators(),\n          decimalSeparator = _this$getSeparators5.decimalSeparator; //check within format pattern\n\n\n      if (typeof format === 'string' && format[caretPos] !== '#') return true; //check in number format\n\n      if (!format && (caretPos < prefix.length || caretPos >= value.length - suffix.length || decimalScale && fixedDecimalScale && value[caretPos] === decimalSeparator)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkIfFormatGotDeleted\",\n    value: function checkIfFormatGotDeleted(start, end, value) {\n      for (var i = start; i < end; i++) {\n        if (this.isCharacterAFormat(i, value)) return true;\n      }\n\n      return false;\n    }\n    /**\n     * This will check if any formatting got removed by the delete or backspace and reset the value\n     * It will also work as fallback if android chome keyDown handler does not work\n     **/\n\n  }, {\n    key: \"correctInputValue\",\n    value: function correctInputValue(caretPos, lastValue, value) {\n      var _this$props11 = this.props,\n          format = _this$props11.format,\n          allowNegative = _this$props11.allowNegative,\n          prefix = _this$props11.prefix,\n          suffix = _this$props11.suffix,\n          decimalScale = _this$props11.decimalScale;\n\n      var _this$getSeparators6 = this.getSeparators(),\n          allowedDecimalSeparators = _this$getSeparators6.allowedDecimalSeparators,\n          decimalSeparator = _this$getSeparators6.decimalSeparator;\n\n      var lastNumStr = this.state.numAsString || '';\n      var _this$selectionBefore = this.selectionBeforeInput,\n          selectionStart = _this$selectionBefore.selectionStart,\n          selectionEnd = _this$selectionBefore.selectionEnd;\n\n      var _findChangedIndex = findChangedIndex(lastValue, value),\n          start = _findChangedIndex.start,\n          end = _findChangedIndex.end;\n      /** Check for any allowed decimal separator is added in the numeric format and replace it with decimal separator */\n\n\n      if (!format && start === end && allowedDecimalSeparators.indexOf(value[selectionStart]) !== -1) {\n        var separator = decimalScale === 0 ? '' : decimalSeparator;\n        return value.substr(0, selectionStart) + separator + value.substr(selectionStart + 1, value.length);\n      }\n      /* don't do anyhting if something got added,\n       or if value is empty string (when whole input is cleared)\n       or whole input is replace with a number\n      */\n\n\n      var leftBound = !!format ? 0 : prefix.length;\n      var rightBound = lastValue.length - (!!format ? 0 : suffix.length);\n\n      if (value.length > lastValue.length || !value.length || start === end || selectionStart === 0 && selectionEnd === lastValue.length || start === 0 && end === lastValue.length || selectionStart === leftBound && selectionEnd === rightBound) {\n        return value;\n      } //if format got deleted reset the value to last value\n\n\n      if (this.checkIfFormatGotDeleted(start, end, lastValue)) {\n        value = lastValue;\n      } //for numbers check if beforeDecimal got deleted and there is nothing after decimal,\n      //clear all numbers in such case while keeping the - sign\n\n\n      if (!format) {\n        var numericString = this.removeFormatting(value);\n\n        var _splitDecimal2 = splitDecimal(numericString, allowNegative),\n            beforeDecimal = _splitDecimal2.beforeDecimal,\n            afterDecimal = _splitDecimal2.afterDecimal,\n            addNegation = _splitDecimal2.addNegation; // eslint-disable-line prefer-const\n        //clear only if something got deleted\n\n\n        var isBeforeDecimalPoint = caretPos < value.indexOf(decimalSeparator) + 1;\n\n        if (numericString.length < lastNumStr.length && isBeforeDecimalPoint && beforeDecimal === '' && !parseFloat(afterDecimal)) {\n          return addNegation ? '-' : '';\n        }\n      }\n\n      return value;\n    }\n    /** Update value and caret position */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(params) {\n      var formattedValue = params.formattedValue,\n          input = params.input,\n          _params$setCaretPosit = params.setCaretPosition,\n          setCaretPosition = _params$setCaretPosit === void 0 ? true : _params$setCaretPosit;\n      var numAsString = params.numAsString,\n          caretPos = params.caretPos;\n      var onValueChange = this.props.onValueChange;\n      var lastValue = this.state.value;\n\n      if (input) {\n        //set caret position, and value imperatively when element is provided\n        if (setCaretPosition) {\n          //calculate caret position if not defined\n          if (!caretPos) {\n            var inputValue = params.inputValue || input.value;\n            var currentCaretPosition = getCurrentCaretPosition(input);\n            /**\n             * set the value imperatively, this is required for IE fix\n             * This is also required as if new caret position is beyond the previous value.\n             * Caret position will not be set correctly\n             */\n\n            input.value = formattedValue; //get the caret position\n\n            caretPos = this.getCaretPosition(inputValue, formattedValue, currentCaretPosition);\n          } //set caret position\n\n\n          this.setPatchedCaretPosition(input, caretPos, formattedValue);\n        } else {\n          /**\n           * if we are not setting caret position set the value imperatively.\n           * This is required on onBlur method\n           */\n          input.value = formattedValue;\n        }\n      } //calculate numeric string if not passed\n\n\n      if (numAsString === undefined) {\n        numAsString = this.removeFormatting(formattedValue);\n      } //update state if value is changed\n\n\n      if (formattedValue !== lastValue) {\n        this.setState({\n          value: formattedValue,\n          numAsString: numAsString\n        }); // trigger onValueChange synchronously, so parent is updated along with the number format. Fix for #277, #287\n\n        onValueChange(this.getValueObject(formattedValue, numAsString));\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var el = e.target;\n      var inputValue = el.value;\n      var state = this.state,\n          props = this.props;\n      var isAllowed = props.isAllowed;\n      var lastValue = state.value || '';\n      var currentCaretPosition = getCurrentCaretPosition(el);\n      inputValue = this.correctInputValue(currentCaretPosition, lastValue, inputValue);\n      var formattedValue = this.formatInput(inputValue) || '';\n      var numAsString = this.removeFormatting(formattedValue);\n      var valueObj = this.getValueObject(formattedValue, numAsString);\n      var isChangeAllowed = isAllowed(valueObj);\n\n      if (!isChangeAllowed) {\n        formattedValue = lastValue;\n      }\n\n      this.updateValue({\n        formattedValue: formattedValue,\n        numAsString: numAsString,\n        inputValue: inputValue,\n        input: el\n      });\n\n      if (isChangeAllowed) {\n        props.onChange(e);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      var props = this.props,\n          state = this.state;\n      var format = props.format,\n          onBlur = props.onBlur,\n          allowLeadingZeros = props.allowLeadingZeros;\n      var numAsString = state.numAsString;\n      var lastValue = state.value;\n      this.focusedElm = null;\n      clearTimeout(this.focusTimeout);\n\n      if (!format) {\n        // if the numAsString is not a valid number reset it to empty\n        if (isNaN(parseFloat(numAsString))) {\n          numAsString = '';\n        }\n\n        if (!allowLeadingZeros) {\n          numAsString = fixLeadingZero(numAsString);\n        }\n\n        var formattedValue = this.formatNumString(numAsString); //change the state\n\n        if (formattedValue !== lastValue) {\n          // the event needs to be persisted because its properties can be accessed in an asynchronous way\n          this.updateValue({\n            formattedValue: formattedValue,\n            numAsString: numAsString,\n            input: e.target,\n            setCaretPosition: false\n          });\n          onBlur(e);\n          return;\n        }\n      }\n\n      onBlur(e);\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e) {\n      var el = e.target;\n      var key = e.key;\n      var selectionStart = el.selectionStart,\n          selectionEnd = el.selectionEnd,\n          _el$value = el.value,\n          value = _el$value === void 0 ? '' : _el$value;\n      var expectedCaretPosition;\n      var _this$props12 = this.props,\n          decimalScale = _this$props12.decimalScale,\n          fixedDecimalScale = _this$props12.fixedDecimalScale,\n          prefix = _this$props12.prefix,\n          suffix = _this$props12.suffix,\n          format = _this$props12.format,\n          onKeyDown = _this$props12.onKeyDown;\n      var ignoreDecimalSeparator = decimalScale !== undefined && fixedDecimalScale;\n      var numRegex = this.getNumberRegex(false, ignoreDecimalSeparator);\n      var negativeRegex = new RegExp('-');\n      var isPatternFormat = typeof format === 'string';\n      this.selectionBeforeInput = {\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      }; //Handle backspace and delete against non numerical/decimal characters or arrow keys\n\n      if (key === 'ArrowLeft' || key === 'Backspace') {\n        expectedCaretPosition = selectionStart - 1;\n      } else if (key === 'ArrowRight') {\n        expectedCaretPosition = selectionStart + 1;\n      } else if (key === 'Delete') {\n        expectedCaretPosition = selectionStart;\n      } //if expectedCaretPosition is not set it means we don't want to Handle keyDown\n      //also if multiple characters are selected don't handle\n\n\n      if (expectedCaretPosition === undefined || selectionStart !== selectionEnd) {\n        onKeyDown(e);\n        return;\n      }\n\n      var newCaretPosition = expectedCaretPosition;\n      var leftBound = isPatternFormat ? format.indexOf('#') : prefix.length;\n      var rightBound = isPatternFormat ? format.lastIndexOf('#') + 1 : value.length - suffix.length;\n\n      if (key === 'ArrowLeft' || key === 'ArrowRight') {\n        var direction = key === 'ArrowLeft' ? 'left' : 'right';\n        newCaretPosition = this.correctCaretPosition(value, expectedCaretPosition, direction);\n      } else if (key === 'Delete' && !numRegex.test(value[expectedCaretPosition]) && !negativeRegex.test(value[expectedCaretPosition])) {\n        while (!numRegex.test(value[newCaretPosition]) && newCaretPosition < rightBound) {\n          newCaretPosition++;\n        }\n      } else if (key === 'Backspace' && !numRegex.test(value[expectedCaretPosition])) {\n        /* NOTE: This is special case when backspace is pressed on a\n        negative value while the cursor position is after prefix. We can't handle it on onChange because\n        we will not have any information of keyPress\n        */\n        if (selectionStart <= leftBound + 1 && value[0] === '-' && typeof format === 'undefined') {\n          var newValue = value.substring(1);\n          this.updateValue({\n            formattedValue: newValue,\n            caretPos: newCaretPosition,\n            input: el\n          });\n        } else if (!negativeRegex.test(value[expectedCaretPosition])) {\n          while (!numRegex.test(value[newCaretPosition - 1]) && newCaretPosition > leftBound) {\n            newCaretPosition--;\n          }\n\n          newCaretPosition = this.correctCaretPosition(value, newCaretPosition, 'left');\n        }\n      }\n\n      if (newCaretPosition !== expectedCaretPosition || expectedCaretPosition < leftBound || expectedCaretPosition > rightBound) {\n        e.preventDefault();\n        this.setPatchedCaretPosition(el, newCaretPosition, value);\n      }\n      /* NOTE: this is just required for unit test as we need to get the newCaretPosition,\n              Remove this when you find different solution */\n\n\n      if (e.isUnitTestRun) {\n        this.setPatchedCaretPosition(el, newCaretPosition, value);\n      }\n\n      onKeyDown(e);\n    }\n    /** required to handle the caret position when click anywhere within the input **/\n\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e) {\n      var el = e.target;\n      /**\n       * NOTE: we have to give default value for value as in case when custom input is provided\n       * value can come as undefined when nothing is provided on value prop.\n      */\n\n      var selectionStart = el.selectionStart,\n          selectionEnd = el.selectionEnd,\n          _el$value2 = el.value,\n          value = _el$value2 === void 0 ? '' : _el$value2;\n\n      if (selectionStart === selectionEnd) {\n        var caretPosition = this.correctCaretPosition(value, selectionStart);\n\n        if (caretPosition !== selectionStart) {\n          this.setPatchedCaretPosition(el, caretPosition, value);\n        }\n      }\n\n      this.props.onMouseUp(e);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      var _this2 = this;\n\n      // Workaround Chrome and Safari bug https://bugs.chromium.org/p/chromium/issues/detail?id=779328\n      // (onFocus event target selectionStart is always 0 before setTimeout)\n      e.persist();\n      this.focusedElm = e.target;\n      this.focusTimeout = setTimeout(function () {\n        var el = e.target;\n        var selectionStart = el.selectionStart,\n            selectionEnd = el.selectionEnd,\n            _el$value3 = el.value,\n            value = _el$value3 === void 0 ? '' : _el$value3;\n\n        var caretPosition = _this2.correctCaretPosition(value, selectionStart); //setPatchedCaretPosition only when everything is not selected on focus (while tabbing into the field)\n\n\n        if (caretPosition !== selectionStart && !(selectionStart === 0 && selectionEnd === value.length)) {\n          _this2.setPatchedCaretPosition(el, caretPosition, value);\n        }\n\n        _this2.props.onFocus(e);\n      }, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props13 = this.props,\n          type = _this$props13.type,\n          displayType = _this$props13.displayType,\n          customInput = _this$props13.customInput,\n          renderText = _this$props13.renderText,\n          getInputRef = _this$props13.getInputRef,\n          format = _this$props13.format;\n      var _this$state = this.state,\n          value = _this$state.value,\n          mounted = _this$state.mounted;\n      var otherProps = omit(this.props, propTypes$1); // add input mode on element based on format prop and device once the component is mounted \n\n      var inputMode = mounted && addInputMode(format) ? 'numeric' : undefined;\n\n      var inputProps = _extends({\n        inputMode: inputMode\n      }, otherProps, {\n        type: type,\n        value: value,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        onMouseUp: this.onMouseUp,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur\n      });\n\n      if (displayType === 'text') {\n        return renderText ? renderText(value, otherProps) || null : React.createElement(\"span\", _extends({}, otherProps, {\n          ref: getInputRef\n        }), value);\n      } else if (customInput) {\n        var CustomInput = customInput;\n        return React.createElement(CustomInput, _extends({}, inputProps, {\n          ref: getInputRef\n        }));\n      }\n\n      return React.createElement(\"input\", _extends({}, inputProps, {\n        ref: getInputRef\n      }));\n    }\n  }]);\n\n  return NumberFormat;\n}(React.Component);\n\nNumberFormat.propTypes = propTypes$1;\nNumberFormat.defaultProps = defaultProps;\n\nexport default NumberFormat;\n","import { Resolver, transformToNestObject, FieldValues } from 'react-hook-form';\nimport Yup from 'yup';\n\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.inner) && error.inner.length\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => {\n          const previousTypes = (previous[path] && previous[path].types) || {};\n          const key = path || type;\n\n          return {\n            ...previous,\n            ...(key\n              ? {\n                  [key]: {\n                    ...(previous[key] || {\n                      message,\n                      type,\n                    }),\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: {\n                            ...previousTypes,\n                            [type]: previousTypes[type]\n                              ? [...[].concat(previousTypes[type]), message]\n                              : message,\n                          },\n                        }\n                      : {}),\n                  },\n                }\n              : {}),\n          };\n        },\n        {},\n      )\n    : {\n        [error.path]: { message: error.message, type: error.type },\n      };\n\nexport const yupResolver = <TFieldValues extends FieldValues>(\n  schema: Yup.ObjectSchema | Yup.Lazy,\n  options: Omit<Yup.ValidateOptions, 'context'> = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  context,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    if (\n      (options as Yup.ValidateOptions).context &&\n      process.env.NODE_ENV === 'development'\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n      );\n    }\n    return {\n      values: (await schema.validate(values, {\n        ...options,\n        context,\n      })) as any,\n      errors: {},\n    };\n  } catch (e) {\n    const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n    return {\n      values: {},\n      errors: transformToNestObject(parsedErrors),\n    };\n  }\n};\n"],"sourceRoot":""}