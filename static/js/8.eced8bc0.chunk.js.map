{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactsFilter/ContactsFilter.jsx","components/Modal/Modal.jsx","views/img-view-bg/contacts-bg.jpg","views/PhoneContactsView.jsx"],"names":["contactOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","addContact","contactObj","addContactRequest","post","addContactSuccess","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getFilter","filter","ContactsSelectors","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","text","name","includes","getFilteredContacts","getErrorMessage","error","getLoading","isLoading","schema","yup","shape","required","number","min","max","useStyles","createUseStyles","form","padding","fontSize","display","flexDirection","backgroundColor","borderRadius","opacity","backdropFilter","border","btn","marginTop","height","color","fontWeight","initialValues","ContactForm","onClose","useDispatch","useSelector","contactsSelectors","st","validationSchema","onSubmit","resetForm","setSubmitting","some","toast","warn","handleSubmiting","className","component","TextField","type","label","variant","margin","Button","value","listItem","justifyContent","marginBottom","paddingLeft","paddingRight","fontStyle","marginLeft","width","ContactsList","useEffect","contactsOperations","map","onClick","handleDeleteContact","ContactsFilter","props","onChange","event","changeFilter","target","modalRoot","document","querySelector","Overlay","position","top","left","alignItems","zIndex","modal","Modal","children","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","currentTarget","container","paddingTop","backgroundSize","backgroundRepeat","wrapper","textAlign","overflow","PhoneContactsView","useState","showModal","setShowModal","togleModal","visibleContacts","Container","style","backgroundImage","contactsImg","length"],"mappings":"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","file":"static/js/8.eced8bc0.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    return dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\nconst addContact = contactObj => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contactObj);\r\n    return dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    return dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst contactOperations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default contactOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getLoading = state => state.contacts.isLoading;\r\n\r\nconst getErrorMessage = state => state.contacts.error;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const getFilteredContacts = contacts => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter(text =>\r\n        text.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    };\r\n    return getFilteredContacts(contacts);\r\n  },\r\n);\r\n\r\nconst ContactsSelectors = {\r\n  getContacts,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getErrorMessage,\r\n  getLoading,\r\n};\r\n\r\nexport default ContactsSelectors;\r\n","import { Formik, Form, Field } from 'formik';\r\nimport Button from '../../components/Button';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport * as yup from 'yup';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { toast } from 'react-toastify';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('First name is a required field'),\r\n  number: yup\r\n    .string()\r\n    .min(10, 'The phone number must be 10 characters long.')\r\n    .max(13, 'The phone number must be 13 characters long.')\r\n    .required('Phone number is a required field'),\r\n});\r\n\r\nconst useStyles = createUseStyles({\r\n  form: {\r\n    padding: 40,\r\n    fontSize: 16,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    backgroundColor: '#FFFFFF',\r\n    borderRadius: 7,\r\n    opacity: 0.8,\r\n    backdropFilter: 'blur(100px)',\r\n    border: '1px solid #A52A2A',\r\n  },\r\n  btn: {\r\n    marginTop: 10,\r\n    height: 30,\r\n    backgroundColor: '#A52A2A',\r\n    color: '#fff',\r\n    padding: 5,\r\n    borderRadius: 7,\r\n    fontWeight: 500,\r\n    border: '1px solid #A52A2A',\r\n    '&:hover': {\r\n      color: '#A52A2A',\r\n      backgroundColor: '#fff',\r\n      border: '1px solid #A52A2A',\r\n      fontWeight: 800,\r\n    },\r\n  },\r\n});\r\n\r\nconst initialValues = { name: '', number: '' };\r\n\r\nconst ContactForm = ({ onClose }) => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const st = useStyles();\r\n\r\n  const handleSubmiting = contactObj => {\r\n    if (contacts.some(({ name }) => name === contactObj.name)) {\r\n      return toast.warn('This contact alredy exist');\r\n    }\r\n    dispatch(contactOperations.addContact(contactObj));\r\n    onClose();\r\n  };\r\n\r\n  const handleContactFormSubmit = (\r\n    { name, number },\r\n    { resetForm, setSubmitting },\r\n  ) => {\r\n    handleSubmiting({ name, number });\r\n    setSubmitting(false);\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={schema}\r\n      onSubmit={handleContactFormSubmit}\r\n    >\r\n      <Form className={st.form}>\r\n        <Field\r\n          component={TextField}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          margin=\"dense\"\r\n        />\r\n        <Field\r\n          component={TextField}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          label=\"Number\"\r\n          variant=\"outlined\"\r\n          margin=\"dense\"\r\n        />\r\n        <Button type=\"submit\" value=\"Create contact\" className={st.btn} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createUseStyles } from 'react-jss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { useEffect } from 'react';\r\nimport Button from '../Button';\r\n\r\nconst useStyles = createUseStyles({\r\n  listItem: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 10,\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n  },\r\n  number: {\r\n    fontStyle: 'italic',\r\n  },\r\n  btn: {\r\n    marginLeft: 20,\r\n    width: 70,\r\n    backgroundColor: '#A52A2A',\r\n    color: '#fff',\r\n    padding: 4,\r\n    borderRadius: 7,\r\n    fontWeight: 600,\r\n    border: '1px solid #A52A2A',\r\n    '&:hover': {\r\n      color: '#A52A2A',\r\n      backgroundColor: '#fff',\r\n      border: '1px solid #A52A2A',\r\n      fontWeight: 600,\r\n    },\r\n  },\r\n});\r\n\r\nconst ContactsList = () => {\r\n  const dispatch = useDispatch();\r\n  const st = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n\r\n  const handleDeleteContact = id => {\r\n    dispatch(contactsOperations.deleteContact(id));\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={st.listItem}>\r\n          <span>{name}:</span>\r\n          <span className={st.number}>{number}</span>\r\n          <Button\r\n            type=\"button\"\r\n            className={st.btn}\r\n            onClick={() => handleDeleteContact(id)}\r\n            value=\"Delete\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ContactsList;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ContactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactsFilter = ({ ...props }) => {\r\n  const value = useSelector(ContactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const changesFilter = event => dispatch(changeFilter(event.target.value));\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        {...props}\r\n        name=\"name\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={changesFilter}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default ContactsFilter;\r\n","import { createPortal } from 'react-dom';\r\nimport { useEffect } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nconst useStyles = createUseStyles({\r\n  Overlay: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100vw',\r\n    height: '100vh',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n    zIndex: 1200,\r\n  },\r\n  modal: {\r\n    position: 'relative',\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 15,\r\n  },\r\n});\r\nconst Modal = ({ onClose, children }) => {\r\n  const st = useStyles();\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  });\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className={st.Overlay} onClick={handleBackdropClick}>\r\n      <div className={st.modal}>{children}</div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","export default __webpack_public_path__ + \"static/media/contacts-bg.31b5334e.jpg\";","import { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createUseStyles } from 'react-jss';\r\nimport ContactForm from '../components/ContactForm';\r\nimport ContactList from '../components/ContactsList';\r\nimport ContactsFilter from '../components/ContactsFilter';\r\nimport Modal from '../components/Modal';\r\nimport Button from '../components/Button';\r\nimport contactOperations from '../redux/contacts/contacts-operations';\r\nimport ContactsSelectors from '../redux/contacts/contacts-selectors';\r\nimport Container from '../components/Container';\r\nimport contactsImg from './img-view-bg/contacts-bg.jpg';\r\n\r\nconst useStyles = createUseStyles({\r\n  container: {\r\n    display: 'flex',\r\n    paddingTop: 60,\r\n    height: 700,\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    color: 'black',\r\n    justifyContent: 'center',\r\n  },\r\n  wrapper: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    width: 500,\r\n    height: 400,\r\n    backgroundColor: '#fff',\r\n    borderRadius: 7,\r\n    opacity: 0.8,\r\n    overflow: 'auto',\r\n    backdropFilter: 'blur(100px)',\r\n    border: '1px solid #A52A2A',\r\n  },\r\n  btn: {\r\n    margin: 20,\r\n    backgroundColor: '#A52A2A',\r\n    color: '#fff',\r\n    padding: 7,\r\n    borderRadius: 7,\r\n    fontWeight: 700,\r\n    border: '1px solid #A52A2A',\r\n    '&:hover': {\r\n      color: '#A52A2A',\r\n      backgroundColor: '#fff',\r\n      border: '1px solid #A52A2A',\r\n      fontWeight: 700,\r\n    },\r\n  },\r\n  filter: {\r\n    margin: 15,\r\n    borderRadius: 7,\r\n  },\r\n});\r\n\r\nconst PhoneContactsView = () => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const contacts = useSelector(ContactsSelectors.getContacts);\r\n  const togleModal = () => setShowModal(!showModal);\r\n  const visibleContacts = useSelector(ContactsSelectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const st = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactOperations.fetchContacts());\r\n  }, [dispatch]);\r\n  return (\r\n    <Container\r\n      className={st.container}\r\n      style={{\r\n        backgroundImage: `url(${contactsImg})`,\r\n      }}\r\n    >\r\n      <div className={st.wrapper}>\r\n        <h1>Phonebook</h1>\r\n        <Button onClick={togleModal} value=\"Add  contact\" className={st.btn} />\r\n        {showModal && (\r\n          <Modal onClose={togleModal}>\r\n            <ContactForm onClose={togleModal} />\r\n          </Modal>\r\n        )}\r\n        <h2>Contacts</h2>\r\n        {contacts.length > 1 && <ContactsFilter className={st.filter} />}\r\n        {visibleContacts.length > 0 && <ContactList />}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PhoneContactsView;\r\n"],"sourceRoot":""}