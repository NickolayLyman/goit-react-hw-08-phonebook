{"version":3,"sources":["components/FormComponents/FormContainer.jsx","components/FormComponents/MyForm.jsx","components/FormComponents/FormField.jsx","components/ContactsList/ContactsList.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.jsx","views/PhoneContactsView.jsx"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","display","flexDirection","alignItems","marginBottom","FormContainer","children","props","style","className","component","maxWidth","width","MyForm","FormField","forwardRef","ref","variant","margin","inputRef","fullWidth","color","module","exports","getContacts","state","contacts","items","getFilter","filter","ContactsSelectors","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","text","name","includes","getFilteredContacts","getErrorMessage","error","getLoading","isLoading","shema","yup","shape","matches","required","number","ContactForm","useState","contactNumber","setContactNumber","dispatch","useDispatch","useSelector","contactsSelectors","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","onSubmit","data","event","find","contact","alert","contactOperations","addContact","type","lable","helperText","message","label","inputMode","customInput","format","mask","value","onChange","target","Button","reset","ContactsList","useEffect","contactsOperations","fetchContacts","map","id","st","listItem","btn","onClick","handleDeleteContact","PhoneContactsView"],"mappings":"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","file":"static/js/6.84545664.chunk.js","sourcesContent":["import Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginBottom: 'auto',\r\n  },\r\n}));\r\n\r\nconst FormContainer = ({ children, ...props }) => {\r\n  const style = useStyles();\r\n  return (\r\n    <Container className={style.root} component=\"main\" maxWidth=\"xs\" {...props}>\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst MyForm = ({ children, ...props }) => {\r\n  const style = useStyles();\r\n\r\n  return (\r\n    <form className={style.root} {...props}>\r\n      {children}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MyForm;\r\n","import { TextField } from '@material-ui/core';\r\nimport { forwardRef } from 'react';\r\n\r\nconst FormField = forwardRef((props, ref) => {\r\n  return (\r\n    <TextField\r\n      variant=\"outlined\"\r\n      margin=\"normal\"\r\n      inputRef={ref}\r\n      fullWidth\r\n      color=\"secondary\"\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nexport default FormField;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactsList_listItem__14thF\",\"name\":\"ContactsList_name__3_nxE\",\"number\":\"ContactsList_number__2sIDr\",\"btn\":\"ContactsList_btn__JLxAH\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getLoading = state => state.contacts.isLoading;\r\n\r\nconst getErrorMessage = state => state.contacts.error;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const getFilteredContacts = contacts => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter(text =>\r\n        text.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    };\r\n    return getFilteredContacts(contacts);\r\n  },\r\n);\r\n\r\nconst ContactsSelectors = {\r\n  getContacts,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getErrorMessage,\r\n  getLoading,\r\n};\r\n\r\nexport default ContactsSelectors;\r\n","import ContactFormContainer from '../FormComponents/FormContainer';\r\nimport { useState } from 'react';\r\nimport FormField from '../FormComponents/FormField';\r\nimport Button from '../../components/Button';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers';\r\nimport * as yup from 'yup';\r\nimport NumberFormat from 'react-number-format';\r\nimport MyForm from '../FormComponents/MyForm';\r\n\r\nconst shema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .matches(/^([^0-9]*)$/, 'Name should not contain numbers')\r\n    .required('First name is a required field'),\r\n  number: yup.string().required('Phone number is a required field'),\r\n});\r\n\r\nconst ContactForm = () => {\r\n  const [contactNumber, setContactNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n\r\n  const handleFormChange = event => {\r\n    const { value } = event.target;\r\n\r\n    setContactNumber(value);\r\n  };\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: 'onBlur',\r\n    resolver: yupResolver(shema),\r\n  });\r\n\r\n  const handleContactFormSubmit = (data, event) => {\r\n    if (contacts.find(contact => contact.name === data.name)) {\r\n      alert(`${data.name} is already exists`);\r\n      // event.target.reset();\r\n      return;\r\n    }\r\n    dispatch(contactOperations.addContact(data.name, data.number));\r\n    // event.target.reset();\r\n    setContactNumber('');\r\n  };\r\n\r\n  return (\r\n    <ContactFormContainer>\r\n      <MyForm onSubmit={handleSubmit(handleContactFormSubmit)}>\r\n        <FormField\r\n          type=\"text\"\r\n          name=\"name\"\r\n          lable=\"Name\"\r\n          error={!!errors.name}\r\n          helperText={errors?.name?.message}\r\n          ref={register}\r\n        />\r\n        <NumberFormat\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          label=\"Number 0** *** ** **\"\r\n          inputMode=\"numeric\"\r\n          error={!!errors.number}\r\n          helperText={errors?.number?.message}\r\n          inputRef={register}\r\n          customInput={FormField}\r\n          format=\"+38 (###) ### ## ##\"\r\n          mask=\"_\"\r\n          value={contactNumber}\r\n          onChange={handleFormChange}\r\n        />\r\n        <Button type=\"submit\" value=\"Create contact\" reset />\r\n      </MyForm>\r\n    </ContactFormContainer>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport st from './ContactsList.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { useEffect } from 'react';\r\nimport Button from '../Button';\r\n\r\nconst ContactsList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n\r\n  const handleDeleteContact = id =>\r\n    dispatch(contactsOperations.handleDeleteContact(id));\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={st.listItem}>\r\n          <span className={st.name}>{name}:</span>\r\n          <span className={st.number}>{number}</span>\r\n          <Button\r\n            type=\"button\"\r\n            className={st.btn}\r\n            onClick={() => handleDeleteContact(id)}\r\n            value=\"Delete\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ContactsList;\r\n","import ContactForm from '../components/ContactForm';\r\nimport ContactList from '../components/ContactsList';\r\nimport Filter from '../components/ContactsList';\r\n\r\nconst PhoneContactsView = () => {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhoneContactsView;\r\n"],"sourceRoot":""}